<template>
	<view class="">
		<!-- 导航栏 -->
		<my-nav-bar isShowBack :isShowRight="false" bg-color="background-color: #ffffff" style="">
			<view class="flex">
				<text class="font-lg font-weight-bold">我的收藏</text>
			</view>
		</my-nav-bar>
		<my-divider></my-divider>
		<my-cell isSingleItem="" no-hover="" text="聊天记录"></my-cell>
		<my-divider></my-divider>
		<view class="py-1 px-4" v-for="(item, index) in list">
			<view class="bg-white rounded p-3 position-relative">
				<view class="position-absolute" style="right: 30rpx; bottom: 30rpx" @click="deleteFava(item,index)">
					<text class="iconfont text-danger">&#xe6b4;</text>
				</view>
				<!-- 文字 -->
				<text class="mx-3" v-if="item.type === 'text'">{{ item.data }}</text>
				<!-- 语音 -->
				<view v-if="item.type === 'audio'" @click="playAudio(item)" class="flex justify-center align-center rounded-0 pl-3 pt-2 pb-2 pr-3" hover-class="img-hover">
					<text class="iconfont">{{ isAudioPlay ? '&#xe7cb;' : '&#xe7cd;' }}</text>
					<u-line-progress
						class="ml-2"
						:inactiveColor="isSelf ? '#ececec' : '#aaaaaa'"
						:style="percentWidth"
						height="10rpx"
						:showText="false"
						:percentage="currentPercentage"
					/>
					<text class="font ml-2" :class="isSelf ? 'text-white' : ''">{{ item.options.time }} "</text>
				</view>
				<!-- 表情包 or 图片-->
				<my-image
					class="mx-3"
					v-if="item.type === 'emoji' || item.type === 'image'"
					:type="item.type"
					imageClass="rounded"
					@click="preview(item.data)"
					:src="item.data"
				></my-image>
				<!-- 视频 -->
				<view v-if="item.type === 'video'" hover-class="img-hover" @click="playVideo(item)" class="rounded position-relative mx-3" style="">
					<my-image :type="item.type" imageClass="rounded" @load="loadPoster" :src="item.options.poster"></my-image>
					<text class="iconfont font-super text-white position-absolute" :style="posterStyle">&#xe602;</text>
				</view>
				<view class="mx-3 mt-3">
					<text class="font text-muted text-ellipsis">{{ item.name }}</text>
				</view>
			</view>
		</view>
		<my-divider></my-divider>
		<my-divider></my-divider>
	</view>
</template>

<script>
import MyNavBar from '@/components/my-ui/my-nav-bar.vue';
import MyCell from '@/components/my-ui/my-cell.vue';
import MyDivider from '@/components/my-ui/my-divider.vue';
import MyImage from '@/components/my-ui/my-image.vue';
import $T from '@/common/lib/time.js';

import { getList, destroy } from '@/api/fava.js';
import { mapState, mapActions } from 'vuex';
import mixin from '@/common/mixin/base.js';
import loadmore from '../../../../uni_modules/uview-ui/libs/config/props/loadmore';
export default {
	mixin: [mixin],
	components: {
		MyNavBar,
		MyCell,
		MyDivider,
		MyImage
	},
	props: {},
	data() {
		return {
			poster: {
				width: 100,
				height: 100
			},
			height: 0,
			innerAudioContext: null,
			isAudioPlay: false, //是否播放
			currentPercentage: 0, //当前进度
			page: 1,
			loadmore: '上拉加载更多',
			list: []
		};
	},
	mounted() {
		this.audioOn(this.onPlayAudio);
	},
	beforeDestroy() {
		this.audioOff(this.onPlayAudio);
		// 销毁音频
		if (this.innerAudioContext) {
			this.innerAudioContext.destroy();
			this.innerAudioContext = null;
		}
	},
	onLoad() {
		this.loadmore = '上拉加载更多';
		this.getList();
	},
	methods: {
		...mapActions('audio', ['audioOn', 'audioEmit', 'audioOff']),
		getList() {
			return new Promise((resolve, reject) => {
				getList({ page: this.page })
					.then((res) => {
						let list = res.map((v) => {
							return {
								...v,
								options: JSON.parse(v.options)
							};
						});

						(this.list = this.page === 1 ? list : [...this.list, ...list]), resolve(res);
						
					})
					.catch((err) => {
						reject(err);
					});
			});
		},
		// 预览图片
		preview(url) {
			uni.previewImage({
				current: url,
				urls: this.imageList
			});
		},
		//获取图片宽高
		loadPoster({ width, height }) {
			this.poster.height = height;
			this.poster.width = width;
		},
		// 预览视频
		playVideo(item) {
			console.log(item);
			uni.navigateTo({
				url: '/pages/privateChat/video/video?url=' + encodeURIComponent(item.data)
			});
		},
		// 播放音频
		playAudio(item) {
			this.isAudioPlay = !this.isAudioPlay;
			this.audioEmit(this.index);
			//初始化音频
			if (!this.innerAudioContext && this.isAudioPlay) {
				console.log('第一次播放');
				this.innerAudioContext = uni.createInnerAudioContext();
				this.innerAudioContext.src = item.data;
				this.innerAudioContext.play();
				this.playProgress();
				return;
			}

			// 暂停重新播放
			if (this.innerAudioContext && this.isAudioPlay) {
				console.log('重新播放');
				this.innerAudioContext.play();
			}

			// 暂停音频
			if (this.innerAudioContext && !this.isAudioPlay) {
				console.log('暂停');
				this.isAudioPlay = false;
				this.innerAudioContext.pause();
			}
		},
		// 播放进度
		playProgress() {
			this.innerAudioContext.onTimeUpdate(() => {
				this.x = this.innerAudioContext.currentTime;

				this.currentPercentage = (this.x / this.y) * 100;
				this.currentPercentage = Math.floor(this.currentPercentage);
			}),
				this.innerAudioContext.onCanplay(() => {
					this.y = this.innerAudioContext.duration;
				});
			this.innerAudioContext.onEnded(() => {
				console.log('播放完毕');
				this.isAudioPlay = false;
				this.currentPercentage = 0;
			});
		},
		//播放音频全局事件
		onPlayAudio(index) {
			if (this.innerAudioContext) {
				// 如果执行的index不是自己的index 暂停播放
				if (this.index !== index) {
					this.innerAudioContext.stop();
					this.isAudioPlay = false;
					this.currentPercentage = 0;
				}
			}
		},
		deleteFava(item,index) {
			
			destroy({ id: item.id, type: item.type, data: item.data }).then((res) => {
				uni.showToast({
					title: '删除成功',
					icon: 'none'
				});
				this.list.splice(index, 1);
			});
		}
	},
	computed: {
		...mapState('audio', ['sum']), // 数组写法
		//视频封面图标位置
		posterStyle() {
			const left = this.poster.width / 2 - uni.upx2px(25);
			const top = this.poster.height / 2 - uni.upx2px(25);
			return `left:${left};top:${top}`;
		},
		// 预览图片列表
		imageList() {
			const arr = this.list.filter((item) => item.type === 'emoji' || item.type === 'image').map((item) => item.data);
			return arr;
		}
	}
};
</script>

<style></style>
