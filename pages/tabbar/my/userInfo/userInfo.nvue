<template>
	<view class="">
		<!-- 导航栏 -->
		<my-nav-bar isShowBack :isShowRight="false" bg-color="background-color: #ffffff" style="">
			<view class="flex">
				<text class="font-lg font-weight-bold">个人资料</text>
			</view>
		</my-nav-bar>
		<my-divider></my-divider>
		<my-cell text="头像" is-single-item is-show-right @click="upload">
			<view class="flex align-center" slot="right">
				<u-avatar size="50" :src="user.avatar"></u-avatar>
				<text class="iconfont text-muted">&#xe6a3;</text>
			</view>
		</my-cell>

		<my-divider></my-divider>

		<my-cell isTopItem isShowRight text="昵称" :extra="user.nickname" @click="update('nickname')"></my-cell>
		<my-cell noHover isBottomItem text="用户名" :extra="user.username"></my-cell>
		<my-divider></my-divider>
		<u-modal showCancelButton @cancel="cancel" @confirm="confirm" :show="show" :title="title">
			<view class="flex-1 bg-input px-3 py-2 rounded">
				<input type="text" v-model="text" class="font-md" placeholder="修改" />
			</view>
		</u-modal>
	</view>
</template>

<script>
import MyNavBar from '@/components/my-ui/my-nav-bar.vue';
import MyCell from '@/components/my-ui/my-cell.vue';
import MyDivider from '@/components/my-ui/my-divider.vue';
import { uploadBase64 } from '@/api/chat.js';
import { updateInfo } from '@/api/user.js';
import { mapState } from 'vuex';
export default {
	components: {
		MyNavBar,
		MyCell,
		MyDivider
	},
	props: {},
	data() {
		return {
			show: false,
			title: '修改',
			type: '',
			text:''
		};
	},
	mounted() {
		uni.$on('getImage', this.getImage);
	},
	beforeDestroy() {
		uni.$off('getImage');
	},

	methods: {
		update(type) {
			this.type = type;
			switch (type) {
				case 'nickname':
					this.title = '修改昵称';
					this.text = this.user.nickname;
					break;
				case 'username':
					this.title = '修改用户名';
					break;
				default:
					break;
			}
			this.show = true;
		},
		confirm() {
			if (!this.text) {
				return uni.showToast({
					icon: 'none',
					title: '不能为空'
				});
			}
			if (this.type == 'nickname') {
				
				// 更改数据库
				updateInfo({ avatar: this.user.avatar, nickname: this.text }).then((res) => {
					console.log(res);
					this.user.nickname = this.text;
					// 更新本地用户信息
					this.$store.commit('user/updateUser', { k: 'nickname', v: this.text });
					this.$store.dispatch('user/updateUser');
				});
			} else {
				this.user.username = this.text;
			}
			this.show = false;
			
		},
		cancel() {
			this.show = false;
		},
		// 接收图片
		async getImage(data) {
			// 上传头像
			const url = await uploadBase64({ str: data });
			// 更改数据库
			await updateInfo({ avatar: url, nicknmae: this.user.nickname });
			this.user.avatar = url;
			// 更新用户信息
			this.$store.commit('user/updateUser', { k: 'avatar', v: url });
			this.$store.dispatch('user/updateUser');
		},
		upload() {
			uni.chooseImage({
				count: 1,
				sizeType: ['original', 'compressed'],
				sourceType: ['album'],
				success: function (res) {
					uni.navigateTo({
						url: `/pages/image/image?url=${res.tempFilePaths[0]}`
					});
				}
			});
		}
	},
	computed: {
		...mapState({
			user: (state) => state.user.user
		})
	}
};
</script>

<style></style>
