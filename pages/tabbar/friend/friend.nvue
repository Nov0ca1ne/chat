<template>
	<view>
		<!-- 导航栏 -->
		<my-nav-bar bg-color="background-color: #ffffff" title="朋友"></my-nav-bar>

		<scroll-view class="" scroll-with-animation scroll-y="true" :style="`height:${scrollHeight}px`" :scroll-into-view="scrollInto">
			<!-- 菜单 -->
			<view @click="click(item.event)" v-for="(item, index) in Menu" hover-class="message-hover" class="bg-white flex px-3 pt-3 pb-3 justify-between">
				<view class="flex ml-2 align-center">
					<text class="iconfont font-super" :style="`color:${item.color}`">{{ item.icon }}</text>
					<text class="ml-3">{{ item.name }}</text>
				</view>
				<view v-if="item.tag === 'friend'" class="mr-4">
					<u-badge bg-color="#eb2f22" max="99" :value="applyCount"></u-badge>
				</view>
			</view>
			
			<!-- 朋友列表 -->
			<view v-if="item.list.length > 0" class="" v-for="(item, index) in list" :key="index" :id="'item-' + item.title">
				<view class="py-2 px-3 bg-white">
					<text class="font-md text-muted font-weight-bold">{{ item.title }}</text>
				</view>

				<view @click="getUserInfo(item2.user_id)" v-for="(item2, index2) in item.list" :key="index2" hover-class="message-hover" class="bg-white flex px-3 pt-3 pb-3">
					<view class="flex align-center"> 
						<u-avatar :src="item2.avatar"></u-avatar>
						<text class="ml-2">{{ item2.name }}</text>
					</view>
				</view>
			</view>
			
		</scroll-view>

		<!-- 侧边栏 -->
		<view
			class="position-fixed right-0 bottom-0 bg-white flex flex-column"
			:style="`top:${top}px`"
			style="width: 50rpx"
			@touchstart="touchStart"
			@touchmove="touchMove"
			@touchend="touchEnd"
		>
			<view v-for="(item, index) in list" :key="index" class="flex-1 flex align-center justify-center">
				<text class="font-sm text-muted">{{ item.title }}</text>
			</view>
		</view>
		
		<!-- 字母提示 -->
		<view
			v-if="current"
			:style="'top:' + modalTop + 'px'"
			style="width: 100rpx; height: 100rpx; right: 50rpx"
			class="position-fixed bg-primary rounded-circle flex align-center justify-center"
		>
			<text class="font-lg text-white">{{ current }}</text>
		</view>
	</view>
</template>

<script>
import MyNavBar from '@/components/my-ui/my-nav-bar.vue';
import MyDivider from '@/components/my-ui/my-divider.vue';
import MyCell from '@/components/my-ui/my-cell.vue';
import DB from '@/common/lib/sqLite.js'
import { mapState } from 'vuex';
export default {
	components: {
		MyNavBar,
		MyCell,
		MyDivider
	},
	data() {
		return {
			top: 0,
			scrollHeight: 0,
			scrollInto: '',
			touchY: 0,
			current: '',
			Menu: [
				{ tag: 'friend', name: '新的朋友', icon: '\ue6c9', color: '#4ec752', event: 'toApply' },
				{
					tag: 'group',
					name: '群聊',
					icon: '\ue7f4',
					color: '#661ef4',
					event: 'group'
				},
				// {
				// 	tag: 'tags',
				// 	name: '标签',
				// 	icon: '\ue863',
				// 	color: '#3B5CF0',
				// 	event: ''
				// }
			],
			
			
		};
	},
	onShow(){
		// 获取通讯录列表
		this.$store.dispatch('user/getFriendList');
	},
	onLoad() {
		let res = uni.getSystemInfoSync();
		this.top = res.statusBarHeight + uni.upx2px(150);
		this.scrollHeight = res.windowHeight - this.top;
		
		
	},
	computed: {
		...mapState({
			applyCount: (state) => state.user.apply.count,
			list: (state) => state.user.friendList
		}),
		// 侧边栏索引高度
		itemHeight() {
			const count = this.list.length || 0;
			return this.scrollHeight / count;
		},
		modalTop() {
			// return (this.scrollHeight - uni.upx2px(150)) / 2;

			return this.touchY + this.top - uni.upx2px(100) / 2;
		}
	},
	methods: {
		click(event) {
			switch (event) {
				case 'toApply':
					uni.navigateTo({
						url: '/pages/tabbar/friend/apply-list/apply-list'
					});
					break;
					case 'group':
						uni.navigateTo({
							url: '/pages/tabbar/friend/group-list/group-list'
						});
						break;
				default:
					break;
			}
		},
		touchStart(e) {
			this.changeScrollInto(e);
		},
		touchMove(e) {
			this.changeScrollInto(e);
		},
		touchEnd() {
			this.current = '';
		},
		changeScrollInto(e) {
			const Y = e.touches[0].pageY; //触摸高度
			const i = Math.floor(Y / this.itemHeight); //计算索引
			let index = 0;
			if (i < 0) index = 0;
			if (i > this.list.length - 1) {
				index = this.list.length - 1;
			}

			if (i > 0 && i <= this.list.length - 1) {
				index = i;
			}

			
			if (Y > 1 + this.itemHeight * index && Y < this.itemHeight * (index + 1)) {
				this.touchY = this.itemHeight * index + this.itemHeight / 2;
			}

			const item = this.list[index];
			if (item) {
				this.scrollInto = 'item-' + item.title;
				this.current = item.title;
			}
		},
		getUserInfo(id) {
			uni.navigateTo({
				url: '/pages/tabbar/friend/user-detail/user-detail?user_id=' + id
			});
		}
	}
};
</script>

<style>
.list-cell {
}
</style>
